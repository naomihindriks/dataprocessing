import subprocess
import os.path
from os import path


def get_subpath_to_root():
    realpath = subprocess.check_output("realpath .", shell = True).decode("utf-8")
    depth_of_current_directory = int(realpath.count("/"))
    subpath_to_root = "../" * 9
    return subpath_to_root


SAMPLES = ["A", "B", "C"]
PATH = get_subpath_to_root() + "commons/Themas/Thema11/Dataprocessing/WC02/"


rule all:
    input:  
        "out_bwa.html",
        "out_bowtie.html"


rule bwa_mapping:
    input:
        PATH + "data/genome.fa",
        PATH + "data/samples/{sample}.fastq"
    benchmark:
        "benchmarks/{sample}.bwa.benchmark.txt"
    output:
        "mapped_reads_bwa/{sample}.bam"
    message: 
        "executing bwa mem on the following {input} to generate the following {output}"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"



rule bowtie_mapping:
    input:
        ref_genome = PATH + "data/genome.fa",
        current_sample = PATH + "data/samples/{sample}.fastq"
    benchmark:
        "benchmarks/{sample}.bowtie.benchmark.txt"
    output:
        "mapped_reads_bowtie/{sample}.bam"
    message: 
        "executing bowtie on the following {input} to generate the following {output}"
    run:
        if (not path.exists("bowtie_index")):
            shell("mkdir bowtie_index")
            shell("bowtie2-build -f {input.ref_genome} bowtie_index/index")
        shell("bowtie2 -x bowtie_index/index -U {input.current_sample} | samtools view -Sb - > {output}")


rule samtools_sort_bowtie:
    input:
        "mapped_reads_bowtie/{sample}.bam"
    output:
        "sorted_reads_bowtie/{sample}.bam"
    message:
        "executing samtools sort on the following {input} to generate the following {output}"
    shell:
        "samtools sort -T sorted_reads_bowtie/{wildcards.sample} "
        "-O bam {input} > {output}"


rule samtools_sort_bwa:
    input:
        "mapped_reads_bwa/{sample}.bam"
    output:
        "sorted_reads_bwa/{sample}.bam"
    message:
        "executing samtools sort on the following {input} to generate the following {output}"
    shell:
        "samtools sort -T sorted_reads_bwa/{wildcards.sample} "
        "-O bam {input} > {output}"


rule samtools_index_bowtie:
    input:
        "sorted_reads_bowtie/{sample}.bam"
    output:
        "sorted_reads_bowtie/{sample}.bam.bai"
    message:
        "executing samtools index on the following {input} to generate the following {output}"
    shell:
        "samtools index {input}"


rule samtools_index_bwa:
    input:
        "sorted_reads_bwa/{sample}.bam"
    output:
        "sorted_reads_bwa/{sample}.bam.bai"
    message:
        "executing samtools index on the following {input} to generate the following {output}"
    shell:
        "samtools index {input}"


rule bcftools_call_bowtie:
    input:
        fa= PATH + "data/genome.fa",
        bam=expand("sorted_reads_bowtie/{sample}.bam", sample=SAMPLES),
        bai=expand("sorted_reads_bowtie/{sample}.bam.bai", sample=SAMPLES)
    output:
        "calls_bowtie/all.vcf"
    message:
        "executing variant calling with samtools and bcftools with {input}, resulting in {output}" 
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"


rule bcftools_call_bwa:
    input:
        fa= PATH + "data/genome.fa",
        bam=expand("sorted_reads_bwa/{sample}.bam", sample=SAMPLES),
        bai=expand("sorted_reads_bwa/{sample}.bam.bai", sample=SAMPLES)
    output:
        "calls_bwa/all.vcf"
    message:
        "executing variant calling with samtools and bcftools with {input}, resulting in {output}" 
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"


rule report_bowtie:
    input:
        "calls_bowtie/all.vcf"
    output:
        "out_bowtie.html"
    message:
        "generating report with {input} resulting in {output}"
    run:
        from snakemake.utils import report
        with open(input[0]) as f:
            n_calls = sum(1 for line in f if not line.startswith("#"))

        report("""
        An example workflow
        ===================================

        Reads were mapped to the Yeas reference genome 
        and variants were called jointly with
        SAMtools/BCFtools.

        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], metadata="Author: Mr Pipeline", T1=input[0])


rule report_bwa:
    input:
        "calls_bwa/all.vcf"
    output:
        "out_bwa.html"
    message:
        "generating report with {input} resulting in {output}"
    run:
        from snakemake.utils import report
        with open(input[0]) as f:
            n_calls = sum(1 for line in f if not line.startswith("#"))

        report("""
        An example workflow
        ===================================

        Reads were mapped to the Yeas reference genome 
        and variants were called jointly with
        SAMtools/BCFtools.

        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], metadata="Author: Mr Pipeline", T1=input[0])


rule clean:
    shell:
        "rm -dr data mapped_reads sorted_reads calls"